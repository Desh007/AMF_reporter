// ReportService.java
package com.example.report.service;

import com.example.report.model.PullRequest;
import com.opencsv.CSVWriter;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class ReportService {

    private static final Logger logger = LoggerFactory.getLogger(ReportService.class);
    private final OkHttpClient httpClient = new OkHttpClient();

    @Value("${bitbucket.api.url}")
    private String bitbucketApiUrl;

    @Value("${bitbucket.username}")
    private String bitbucketUsername;

    @Value("${bitbucket.password}")
    private String bitbucketPassword;

    public List<PullRequest> getOpenAutomergeFailures(String releaseBranch) {
        List<PullRequest> pullRequests = new ArrayList<>();
        int page = 1;

        try {
            while (true) {
                String url = String.format("%s/repositories/{workspace}/{repo_slug}/pullrequests?state=OPEN&pagelen=100&page=%d", bitbucketApiUrl, page);
                Request request = new Request.Builder()
                        .url(url.replace("{workspace}", "your_workspace").replace("{repo_slug}", "your_repo_slug"))
                        .header("Authorization", Credentials.basic(bitbucketUsername, bitbucketPassword))
                        .build();

                try (Response response = httpClient.newCall(request).execute()) {
                    if (!response.isSuccessful()) {
                        logger.error("Unexpected code: {}", response.code());
                        break;
                    }

                    BitbucketResponse bitbucketResponse = parseResponse(response.body().string());
                    if (bitbucketResponse != null && bitbucketResponse.getValues() != null && !bitbucketResponse.getValues().isEmpty()) {
                        int serialNo = pullRequests.size() + 1; // Maintain correct serial numbers
                        for (PullRequestData prData : bitbucketResponse.getValues()) {
                            if (prData.getTitle().contains("automerge failure")) {
                                PullRequest pr = new PullRequest(
                                        serialNo++,
                                        prData.getId(),
                                        String.join(", ", prData.getFiles()), // Extract affected files
                                        prData.getAuthor().getUser().getDisplayName(),
                                        prData.getCreatedOn(),
                                        prData.getDescription() // Comments/description
                                );
                                pullRequests.add(pr);
                                logger.debug("Added PR: {}", pr);
                            }
                        }
                        page++;
                    } else {
                        logger.info("No more pull requests found or reached the last page.");
                        break;
                    }
                } catch (IOException e) {
                    logger.error("Error while executing request: {}", e.getMessage(), e);
                }
            }
        } catch (Exception e) {
            logger.error("Unexpected error occurred: {}", e.getMessage(), e);
        }

        return pullRequests;
    }

    private BitbucketResponse parseResponse(String responseBody) {
        // Implement JSON parsing to convert the responseBody to BitbucketResponse object
        // You can use a library like Jackson or Gson here
        return new ObjectMapper().readValue(responseBody, BitbucketResponse.class);
    }

    public void writeReportToCsv(List<PullRequest> pullRequests, String filePath) throws IOException {
        logger.info("Writing report to CSV at: {}", filePath);
        try (CSVWriter writer = new CSVWriter(new FileWriter(filePath))) {
            String[] header = {"Serial No", "Pull Request ID", "Affected Files", "Owner", "Date Opened", "Comments"};
            writer.writeNext(header);

            for (PullRequest pr : pullRequests) {
                String[] record = {
                        String.valueOf(pr.getSerialNo()),
                        pr.getPullRequestId(),
                        pr.getAffectedFiles(),
                        pr.getOwner(),
                        pr.getDateOpened(),
                        pr.getComments()
                };
                writer.writeNext(record);
                logger.debug("Written PR to CSV: {}", pr);
            }
        }
    }
}
